/**
 * ÂÆöÊó∂‰ªªÂä°ÊúçÂä°
 * Ë¥üË¥£ÂÆöÊúüÊõ¥Êñ∞ËÆ∫ÊñáÂíåÂçöÂÆ¢
 */

const cron = require('node-cron');
const arxivService = require('./arxivService');
const blogService = require('./blogService');
const paperCrawlerService = require('./paperCrawlerService');

class SchedulerService {
  constructor() {
    this.tasks = [];
    this.isEnabled = process.env.ENABLE_SCHEDULER !== 'false'; // ÈªòËÆ§ÂêØÁî®
    this.paperUpdateTime = process.env.PAPER_UPDATE_TIME || '0 9 * * *'; // ÈªòËÆ§ÊØèÂ§©9:00
    this.blogUpdateTime = process.env.BLOG_UPDATE_TIME || '0 9 * * *'; // ÈªòËÆ§ÊØèÂ§©9:00
  }

  /**
   * ÂêØÂä®ÊâÄÊúâÂÆöÊó∂‰ªªÂä°
   */
  start() {
    if (!this.isEnabled) {
      console.log('‚è∞ ÂÆöÊó∂‰ªªÂä°Â∑≤Á¶ÅÁî®ÔºàENABLE_SCHEDULER=falseÔºâ');
      return;
    }

    console.log('\n‚è∞ ========== ÂÆöÊó∂‰ªªÂä°ÊúçÂä°ÂêØÂä® ==========');
    
    // ‰ªªÂä°1: Êõ¥Êñ∞ËÆ∫ÊñáÔºàÊØèÂ§©9:00Ôºâ
    this.schedulePaperUpdate();
    
    // ‰ªªÂä°2: Êõ¥Êñ∞ÂçöÂÆ¢ÔºàÊØèÂ§©9:00Ôºâ
    this.scheduleBlogUpdate();
    
    console.log('‚è∞ ======================================\n');
  }

  /**
   * ÂÆöÊó∂Êõ¥Êñ∞ËÆ∫Êñá
   */
  schedulePaperUpdate() {
    console.log(`üìÑ ËÆ∫ÊñáÊõ¥Êñ∞‰ªªÂä°: ${this.paperUpdateTime}`);
    console.log(`   ‚Ä¢ cronË°®ËææÂºè: ${this.paperUpdateTime}`);
    console.log(`   ‚Ä¢ ËØ¥Êòé: ${this.getCronDescription(this.paperUpdateTime)}`);

    const task = cron.schedule(this.paperUpdateTime, async () => {
      console.log('\nüîÑ ========== ÂÆöÊó∂‰ªªÂä°ÔºöÊõ¥Êñ∞ËÆ∫Êñá ==========');
      console.log(`‚è∞ Ëß¶ÂèëÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}`);
      
      try {
        // ÊñπÂºè1: ‰ªéarXivËé∑ÂèñÊúÄÊñ∞ËÆ∫ÊñáÔºàÊé®ËçêÔºåÊúÄÁ®≥ÂÆöÔºâ
        console.log('\nüì° ÊñπÂºè1: ‰ªéarXivËé∑ÂèñÊúÄÊñ∞ËÆ∫Êñá...');
        const categories = ['cs.AI', 'cs.LG', 'cs.CV', 'cs.CL', 'cs.NE', 'cs.RO'];
        const arxivPapers = await arxivService.fetchMultiCategoryPapers(categories, 50, true);
        
        if (arxivPapers && arxivPapers.length > 0) {
          console.log(`‚úÖ arXiv: ÊàêÂäüËé∑Âèñ ${arxivPapers.length} ÁØáËÆ∫Êñá`);
        } else {
          console.log('‚ö†Ô∏è  arXiv: Êú™Ëé∑ÂèñÂà∞Êñ∞ËÆ∫Êñá');
        }

        // ÊñπÂºè2: Â∞ùËØï‰ªéÂÖ∂‰ªñÊ∏†ÈÅìËé∑ÂèñÔºàÂèØÈÄâÔºåÂèØËÉΩË∂ÖÊó∂Ôºâ
        if (process.env.ENABLE_EXTERNAL_CRAWL === 'true') {
          console.log('\nüì° ÊñπÂºè2: ‰ªéÂÖ∂‰ªñÊ∏†ÈÅìËé∑ÂèñËÆ∫Êñá...');
          try {
            const crawlResult = await paperCrawlerService.crawlAllSources({
              reddit: true,
              papersWithCode: false, // ÁªèÂ∏∏Ë∂ÖÊó∂ÔºåÈªòËÆ§ÂÖ≥Èó≠
              huggingface: false,    // ÁªèÂ∏∏Ë∂ÖÊó∂ÔºåÈªòËÆ§ÂÖ≥Èó≠
              twitter: false,
              limit: 10
            });
            
            if (crawlResult.success && crawlResult.total > 0) {
              console.log(`‚úÖ ÂÖ∂‰ªñÊ∏†ÈÅì: ÊàêÂäüËé∑Âèñ ${crawlResult.total} ÁØáËÆ∫Êñá`);
            }
          } catch (error) {
            console.error('‚ö†Ô∏è  ÂÖ∂‰ªñÊ∏†ÈÅìÁà¨ÂèñÂ§±Ë¥•Ôºà‰∏çÂΩ±Âìç‰∏ªÊµÅÁ®ãÔºâ:', error.message);
          }
        }

        console.log('‚úÖ ËÆ∫ÊñáÊõ¥Êñ∞‰ªªÂä°ÂÆåÊàêÔºÅ');
        console.log('========================================\n');
        
      } catch (error) {
        console.error('‚ùå ËÆ∫ÊñáÊõ¥Êñ∞‰ªªÂä°Â§±Ë¥•:', error.message);
        console.error('========================================\n');
      }
    }, {
      scheduled: true,
      timezone: "Asia/Shanghai" // ‰ΩøÁî®Âåó‰∫¨Êó∂Èó¥
    });

    this.tasks.push({ name: 'paperUpdate', task });
  }

  /**
   * ÂÆöÊó∂Êõ¥Êñ∞ÂçöÂÆ¢
   */
  scheduleBlogUpdate() {
    console.log(`üìù ÂçöÂÆ¢Êõ¥Êñ∞‰ªªÂä°: ${this.blogUpdateTime}`);
    console.log(`   ‚Ä¢ cronË°®ËææÂºè: ${this.blogUpdateTime}`);
    console.log(`   ‚Ä¢ ËØ¥Êòé: ${this.getCronDescription(this.blogUpdateTime)}`);

    const task = cron.schedule(this.blogUpdateTime, async () => {
      console.log('\nüîÑ ========== ÂÆöÊó∂‰ªªÂä°ÔºöÊõ¥Êñ∞ÂçöÂÆ¢ ==========');
      console.log(`‚è∞ Ëß¶ÂèëÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}`);
      
      try {
        // Ëé∑ÂèñAIÁõ∏ÂÖ≥ÂçöÂÆ¢
        console.log('\nüì° ‰ªéRSSÊ∫êËé∑ÂèñÊúÄÊñ∞ÂçöÂÆ¢...');
        const blogs = await blogService.getBlogs(50, true); // Âº∫Âà∂Âà∑Êñ∞ÁºìÂ≠ò
        
        console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${blogs.length} ÁØáÂçöÂÆ¢`);
        console.log('‚úÖ ÂçöÂÆ¢Êõ¥Êñ∞‰ªªÂä°ÂÆåÊàêÔºÅ');
        console.log('========================================\n');
        
      } catch (error) {
        console.error('‚ùå ÂçöÂÆ¢Êõ¥Êñ∞‰ªªÂä°Â§±Ë¥•:', error.message);
        console.error('========================================\n');
      }
    }, {
      scheduled: true,
      timezone: "Asia/Shanghai"
    });

    this.tasks.push({ name: 'blogUpdate', task });
  }

  /**
   * ÂÅúÊ≠¢ÊâÄÊúâÂÆöÊó∂‰ªªÂä°
   */
  stop() {
    console.log('\n‚è∞ ÂÅúÊ≠¢ÂÆöÊó∂‰ªªÂä°...');
    this.tasks.forEach(({ name, task }) => {
      task.stop();
      console.log(`‚úÖ Â∑≤ÂÅúÊ≠¢‰ªªÂä°: ${name}`);
    });
    this.tasks = [];
    console.log('‚è∞ ÊâÄÊúâÂÆöÊó∂‰ªªÂä°Â∑≤ÂÅúÊ≠¢\n');
  }

  /**
   * ÊâãÂä®Ëß¶ÂèëËÆ∫ÊñáÊõ¥Êñ∞ÔºàÁî®‰∫éÊµãËØïÔºâ
   */
  async triggerPaperUpdate() {
    console.log('\nüîÑ ÊâãÂä®Ëß¶ÂèëËÆ∫ÊñáÊõ¥Êñ∞...\n');
    
    try {
      const categories = ['cs.AI', 'cs.LG', 'cs.CV', 'cs.CL', 'cs.NE', 'cs.RO'];
      const papers = await arxivService.fetchMultiCategoryPapers(categories, 50, true);
      
      console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${papers.length} ÁØáËÆ∫Êñá\n`);
      return { success: true, count: papers.length };
    } catch (error) {
      console.error('‚ùå ËÆ∫ÊñáÊõ¥Êñ∞Â§±Ë¥•:', error.message, '\n');
      return { success: false, error: error.message };
    }
  }

  /**
   * ÊâãÂä®Ëß¶ÂèëÂçöÂÆ¢Êõ¥Êñ∞ÔºàÁî®‰∫éÊµãËØïÔºâ
   */
  async triggerBlogUpdate() {
    console.log('\nüîÑ ÊâãÂä®Ëß¶ÂèëÂçöÂÆ¢Êõ¥Êñ∞...\n');
    
    try {
      const blogs = await blogService.getBlogs(50, true);
      
      console.log(`‚úÖ ÊàêÂäüËé∑Âèñ ${blogs.length} ÁØáÂçöÂÆ¢\n`);
      return { success: true, count: blogs.length };
    } catch (error) {
      console.error('‚ùå ÂçöÂÆ¢Êõ¥Êñ∞Â§±Ë¥•:', error.message, '\n');
      return { success: false, error: error.message };
    }
  }

  /**
   * Ëé∑ÂèñcronË°®ËææÂºèÁöÑ‰∏≠ÊñáÊèèËø∞
   */
  getCronDescription(cronExp) {
    const patterns = {
      '0 9 * * *': 'ÊØèÂ§©‰∏äÂçà9:00',
      '0 0 * * *': 'ÊØèÂ§©ÂçàÂ§ú0:00',
      '0 */6 * * *': 'ÊØè6Â∞èÊó∂‰∏ÄÊ¨°',
      '0 8,20 * * *': 'ÊØèÂ§©‰∏äÂçà8:00ÂíåÊôö‰∏ä20:00',
      '0 9 * * 1-5': 'Â∑•‰ΩúÊó•‰∏äÂçà9:00',
      '*/30 * * * *': 'ÊØè30ÂàÜÈíü‰∏ÄÊ¨°',
      '0 9,21 * * *': 'ÊØèÂ§©‰∏äÂçà9:00ÂíåÊôö‰∏ä21:00'
    };
    
    return patterns[cronExp] || cronExp;
  }

  /**
   * Ëé∑Âèñ‰ªªÂä°Áä∂ÊÄÅ
   */
  getStatus() {
    return {
      enabled: this.isEnabled,
      tasks: this.tasks.map(({ name, task }) => ({
        name,
        running: task ? true : false
      })),
      schedule: {
        paper: this.paperUpdateTime,
        blog: this.blogUpdateTime
      },
      timezone: 'Asia/Shanghai'
    };
  }
}

// ÂàõÂª∫Âçï‰æã
const schedulerService = new SchedulerService();

module.exports = schedulerService;

